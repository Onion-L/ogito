name: Build and Publish

on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            npm-name: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            npm-name: linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            npm-name: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            npm-name: darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            npm-name: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            npm-name: win32-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Set environment to use vendored OpenSSL
        run: echo "OPENSSL_NO_VENDOR=0" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release --target=${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            tar -czf ../../../ogito-${{ matrix.npm-name }}.tar.gz ogito.exe
          else
            tar -czf ../../../ogito-${{ matrix.npm-name }}.tar.gz ogito
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ogito-binary-${{ matrix.npm-name }}
          path: ogito-${{ matrix.npm-name }}.tar.gz

  publish:
    name: Prepare and Publish Packages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: all-binaries

      - name: Move binaries to root
        run: |
          mv all-binaries/*/* .
          rm -rf all-binaries

      - name: Verify downloaded files
        run: ls -la

      - name: Install dependencies
        run: pnpm install --ignore-scripts --no-git-checks

      - name: Prepare packages
        run: pnpm run script

      - name: Publish packages to npm
        run: pnpm -r publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
