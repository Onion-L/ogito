name: Build Multi-platform Binaries

on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            npm-name: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            npm-name: linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            npm-name: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            npm-name: darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            npm-name: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            npm-name: win32-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Set environment to use vendored OpenSSL
        run: echo "OPENSSL_NO_VENDOR=0" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release --target=${{ matrix.target }}
