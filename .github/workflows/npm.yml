name: NPM Release

on:
  push:
    branches: ['main']
    # tags:
    #   - 'v*'

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            npm-name: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            npm-name: linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            npm-name: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            npm-name: darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            npm-name: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            npm-name: win32-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools for Linux ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            tar -czf ../../../ogito-${{ matrix.npm-name }}.tar.gz ogito.exe
          else
            tar -czf ../../../ogito-${{ matrix.npm-name }}.tar.gz ogito
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.npm-name }}
          path: ogito-*.tar.gz

  # publish:
  #   needs: build-binaries
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: binary-*
  #         merge-multiple: true
  #         path: .

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         registry-url: 'https://registry.npmjs.org'

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: 8

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Build TypeScript
  #       run: pnpm run build

  #     - name: Run pkg script
  #       run: pnpm tsx script/pkg.ts

  #     - name: Publish platform packages
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: |
  #         for dir in packages/*/; do
  #           if [ -d "$dir" ]; then
  #             cd "$dir"
  #             npm publish --access public
  #             cd ../..
  #           fi
  #         done

  #     - name: Publish main package
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: npm publish --access public
